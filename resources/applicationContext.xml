<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<context:annotation-config />
	<context:component-scan base-package="controller" />
	<context:component-scan base-package="service.*" />
	<context:component-scan base-package="com.founder.fasf.*" />
	<!-- <context:component-scan base-package="com.founder.oa.*" /> <context:component-scan 
		base-package="com.founder.oa.*.*" /> <context:component-scan base-package="com.founder.oa.*.*.*" 
		/> <context:component-scan base-package="com.founder.fasf.*" /> <context:component-scan 
		base-package="com.founder.rbac.*" /> -->

	<mvc:annotation-driven />
	<mvc:resources mapping="/js/**" location="/resources/js/" />
	<mvc:resources mapping="/images/**" location="/resources/images/" />
	<mvc:resources mapping="/css/**" location="/resources/css/" />

	<mvc:interceptors>
		<bean class="controller.HttpControllerInterceptor" />
	</mvc:interceptors>
<!-- 	<bean id="exceptionResolver" class="com.founder.oa.exception.OaExceptionHandler" />
 -->
	<!-- <bean id="proxyController" class="com.founder.oa.controller.AnyController"> 
		</bean> -->


	<!-- Tiles Config -->

	<!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver"> 
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" 
		/> </bean> -->

	<!-- <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer"> 
		<property name="definitions"> <value>classpath:tiles-*.xml</value> </property> 
		</bean> -->

	<!-- <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"> 
		<property name="mediaTypes"> <map> <entry key="atom" value="application/atom+xml" 
		/> <entry key="html" value="text/html" /> <entry key="json" value="application/json" 
		/> </map> </property> <property name="viewResolvers"> <list> <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver"> 
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" 
		/> </bean> </list> </property> <property name="defaultViews"> <list> <bean 
		class="com.founder.hs.utils.MyMappingJacksonJsonView" /> </list> </property> 
		</bean> -->

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<bean id="propertiesReader"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:setting.properties" />
	</bean>
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation. AnnotationMethodHandlerAdapter"> 
		<property name="messageConverters"> <list id="beanList"> <ref bean="mappingJacksonHttpMessageConverter" 
		/> </list> </property> </bean> <bean id="mappingJacksonHttpMessageConverter" 
		class="org.springframework. http.converter.json.MappingJacksonHttpMessageConverter"> 
		<property name="supportedMediaTypes"> <list> <value>text/html;charset=UTF-8</value> 
		</list> </property> </bean> -->
	<!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="prefix" value="/WEB-INF/jsp/" /> <property name="suffix" 
		value=".jsp" /> </bean> -->

	<!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
		<property name="maxInMemorySize" value="4096" /> <property name="maxUploadSize" 
		value="10000000" /> </bean> -->

	<!-- DB配置 -->
	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="locations" value="classpath:setting.properties" /> </bean> -->

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>

		<property name="maxPoolSize" value="${pool.max}"></property>
		<property name="minPoolSize" value="${pool.min}"></property>
		<property name="initialPoolSize" value="1"></property>
		<property name="maxIdleTime" value="${pool.idle}"></property>
	</bean>

	<bean id="simpleJdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
		<constructor-arg>
			<ref bean="dataSource" />
		</constructor-arg>
	</bean>
	<bean id="simpleJdbcCall" class="org.springframework.jdbc.core.simple.SimpleJdbcCall">
		<constructor-arg>
			<ref bean="dataSource" />
		</constructor-arg>
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 定义事务管理器（声明式的事务） -->
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource"> <ref bean="dataSource" /> </property> </bean> -->
	<!-- ====================== 缓存 ======================= -->
	<!-- <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"> 
		<property name="configLocation"> <value>classpath:ehcache.xml</value> </property> 
		</bean> <bean id="cache" class="org.springframework.cache.ehcache.EhCacheFactoryBean"> 
		<property name="cacheName"> <value>DEFAULT_CACHE</value> </property> <property 
		name="cacheManager" ref="cacheManager" /> </bean> -->

	<!-- ====================== 定时任务 ====================== -->
	<!-- <bean name="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
		必须，QuartzScheduler 延时启动，应用启动后 QuartzScheduler 再启动 <property name="startupDelay" 
		value="60"/> 普通触发器 ：触发器列表 <property name="triggers"> <list> <ref local="testTrigger"/> 
		</list> </property> </bean> -->

	<!-- 配置执行定时任务的类和方法 -->
	<!-- <bean id="testDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
		<property name="targetObject"> <ref bean="timedTaskService"></ref> </property> 
		<property name="targetMethod"> <value>run</value> </property> </bean> <bean 
		id="testTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean"> 
		<property name="jobDetail"> <ref bean="testDetail"/> 触发器触发的 执行定时任务的bean </property> 
		<property name="cronExpression"> 每天23时 定时任务执行的间隔 <value>0 0/1 * * * ?</value> 
		</property> </bean> -->
</beans>